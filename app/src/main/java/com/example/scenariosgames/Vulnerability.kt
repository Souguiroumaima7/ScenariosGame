// Kotlin code representing the achievement: Analysis of Scenarios Games app and detection of 4 critical vulnerabilities

// Define a data class to represent a vulnerability
data class Vulnerability(
    val id: Int,
    val title: String,
    val severity: String,
    val description: String
)

// Define a class to represent the analysis report
class SecurityAnalysisReport(val appName: String) {
    private val vulnerabilities = mutableListOf<Vulnerability>()

    fun addVulnerability(vulnerability: Vulnerability) {
        vulnerabilities.add(vulnerability)
        println("Added vulnerability: ${vulnerability.title}")
    }

    fun generateReport() {
        println("\nSecurity Analysis Report for: $appName")
        println("Total Critical Vulnerabilities Detected: ${vulnerabilities.size}\n")
        vulnerabilities.forEach { v ->
            println("ID: ${v.id}\nTitle: ${v.title}\nSeverity: ${v.severity}\nDescription: ${v.description}\n")
        }
    }
}

fun main() {
    val report = SecurityAnalysisReport("Scenarios Games")

    report.addVulnerability(
        Vulnerability(
            id = 1,
            title = "Insecure Data Storage",
            severity = "Critical",
            description = "Sensitive user data stored unencrypted on the device."
        )
    )

    report.addVulnerability(
        Vulnerability(
            id = 2,
            title = "Hardcoded API Keys",
            severity = "Critical",
            description = "API keys found hardcoded in the source code, exposing backend services."
        )
    )

    report.addVulnerability(
        Vulnerability(
            id = 3,
            title = "Improper Authentication",
            severity = "Critical",
            description = "Weak authentication mechanism allows session hijacking."
        )
    )

    report.addVulnerability(
        Vulnerability(
            id = 4,
            title = "Unvalidated Input",
            severity = "Critical",
            description = "Lack of input validation leads to potential code injection attacks."
        )
    )

    report.generateReport()
}
